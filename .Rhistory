ggplot(data = stormdata_economic_sum[,1:2], aes(stormdata_economic_sum$EVTYPE)) +
geom_histogram() +
ggtitle("Property damage in every event group") + ylim(0, 10e+12) +
ylab("Damage in $") + xlab("Event group")
ggplot(data = stormdata_economic_sum, aes(stormdata_economic_sum$EVTYPE)) +
geom_histogram() +
ggtitle("Property damage in every event group") + ylim(0, 10e+12) +
ylab("Damage in $") + xlab("Event group")
head(t)
qplot(t$EVTYPE, geom = "histogram")
class(t$PROPDMG)
class(t$EVTYPE)
i <- ggplot(data = t,
aes(y = PROPDMG, x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_line() +
geom_point()
i
i <- ggplot(data = t,
aes(y = PROPDMG, x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_bar()
i
ggplot(data = t,
aes(y = PROPDMG, x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_bar() +
geom_point()
ggplot(data = t,
aes(y = PROPDMG, x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_histogram() +
geom_point()
ggplot(data = t,
aes(x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_histogram() +
geom_point()
ggplot(data = t,
aes(x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_histogram()
ggplot(data = t,
aes(x = EVTYPE, ...density...)) +
ggtitle("Property damage by event") +
geom_histogram()
ggplot(data = t,
aes(x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_density()
ggplot(data = t,
aes(EVTYPE)) +
ggtitle("Property damage by event") +
geom_density()
ggplot(data = t,
aes(EVTYPE, colour=EVTYPE)) +
ggtitle("Property damage by event") +
geom_density()
ggplot(data = t,
aes(x = EVTYPE, fill=PROPDMG)) +
ggtitle("Property damage by event") +
geom_histogram()
ggplot(data = t,
aes(x = EVTYPE, fill = PROPDMG)) +
ggtitle("Property damage by event") +
geom_histogram(binwidth = 1, alpha = 0.5, position = "identity")
ggplot(data = t,
aes(x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_histogram(binwidth = 1, alpha = 0.5, position = "identity")
ggplot(data = t,
aes(y = PROPDMG, x = EVTYPE)) +
ggtitle("Property damage by event") +
geom_line()
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", a = 0.5, stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG, a = 0.5)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, colour=EVTYPE, stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y = PROPDMG, colour= EVTYPE)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG, fill=...count...)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG, fill=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG, fill=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") + xlab("Property damage in $") + ylab("Event group")
ggplot(data = t,
aes(x = EVTYPE, y=PROPDMG, fill=PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") + ylab("Property damage in $") + xlab("Event group")
ggplot(data = t,
aes(x = EVTYPE, y=CROPDMG, fill=CROPDMG)) +
ggtitle("Crop damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") + ylab("Crop damage in $") + xlab("Event group")
ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y=CROPDMG, fill=CROPDMG)) +
ggtitle("Crop damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") + ylab("Crop damage in $") + xlab("Event group")
p <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = PROPDMG, fill = PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Property damage in $") + xlab("Event group")
c <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = CROPDMG, fill = CROPDMG)) +
ggtitle("Crop damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Crop damage in $") + xlab("Event group")
g2 <- multiplot(p, c, cols = 2)
g2
View(fat_and_inj_sum)
View(fat_and_inj_sum)
p <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = PROPDMG, fill = PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Property damage in $") + xlab("Event group")
c <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = CROPDMG, fill = CROPDMG)) +
ggtitle("Crop damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Crop damage in $") + xlab("Event group")
g2 <- multiplot(p, c, cols = 2)
g2
stormdata_population_health <- stormdata[,c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES")]
stormdata_economic <- subset(stormdata, (CROPDMG > 0 | PROPDMG > 0), select = c(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP))
stormdata_population_health$BGN_DATE <- as.character(stormdata_population_health$BGN_DATE)
testregexp <- regexpr("[0-9]{4}", stormdata_population_health$BGN_DATE)
testmatch <- regmatches(stormdata_population_health$BGN_DATE, testregexp)
stormdata_population_health$BGN_DATE <- as.integer(stormdata_population_health$BGN_DATE <- testmatch)
stormdata_population_health$EVTYPE <- tolower(stormdata_population_health$EVTYPE)
fat_and_inj <- subset(stormdata_population_health, (FATALITIES > 0 | INJURIES > 0), select = c(BGN_DATE, EVTYPE, FATALITIES, INJURIES))
View(stormdata_population_health)
type <- vector(mode = "list", length = 6)
names(type) <- c("storm", "extreme_cold", "heat", "in_sea", "landslide", "other")
type[[1]] <- c("storm", "dam break", "gustnado", "tropical depression", "landspout", "tstmw", "burst", "wet", "turbulence", "lig", "thunder", "dust", "wind", "hurricane", "tornado", "funnel cloud", "flood", "rain", "fog", "torndao", "fld", "stream")
type[[2]] <- c("frost", "cool", "chill", "precip","freez", "mix", "glaze", "sleet", "hypothermia", "low temp", "ice", "icy", "snow", "cold", "blizzard", "swirl", "hail", "winter", "wintry")
type[[3]] <- c("heat wave", "smoke", "dry", "warm", "high temp", "drought", "heat", "hyperthermia", "fire")
type[[4]] <- c("drowning", "beach", "surf", "surge", "coast", "rip current", "tide", "seiche", "sea", "ocean", "tsunami", "marine mishap", "marine", "wave", "waterspout", "water")
type[[5]] <- c("landslide", "avalance", "aval", "rockslide", "slide", "land")
type[[6]] <- c("other", "high", "\\?", "urban", "county")
for (t in names(type)) {
for (word in type[[t]]) {
fat_and_inj$EVTYPE <- gsub(paste(".*",word,".*", sep = ""), t, fat_and_inj$EVTYPE)
stormdata_economic$EVTYPE <- gsub(paste(".*",word,".*", sep = ""), t, stormdata_economic$EVTYPE)
}
}
fat_and_inj_sum <- aggregate(fat_and_inj[,3:4], fat_and_inj[,1:2], sum)
View(fat_and_inj_sum)
stormdata_economic$EVTYPE <- tolower(stormdata_economic$EVTYPE)
stormdata_economic$PROPDMGEXP <- tolower(stormdata_economic$PROPDMGEXP)
stormdata_economic$CROPDMGEXP <- tolower(stormdata_economic$CROPDMGEXP)
prop_seq <- apply(stormdata_economic, 1, function(x) { if (x["PROPDMGEXP"] == "k") { as.numeric(x["PROPDMG"]) * 1000 } else {if (x["PROPDMGEXP"] == "m") {as.numeric(x["PROPDMG"])*10^6} else {if (x["PROPDMGEXP"] == "b") {as.numeric(x["PROPDMG"])*10^9} else {if (x["PROPDMGEXP"] == "h") {as.numeric(x["PROPDMG"])*100}}}}} )
crop_seq <- apply(stormdata_economic, 1, function(x) { if (x["CROPDMGEXP"] == "k") { as.numeric(x["CROPDMG"]) * 1000 } else {if (x["CROPDMGEXP"] == "m") {as.numeric(x["CROPDMG"])*10^6} else {if (x["CROPDMGEXP"] == "b") {as.numeric(x["CROPDMG"])*10^9} else {if (x["CROPDMGEXP"] == "h") {as.numeric(x["CROPDMG"])*100}}}}} )
stormdata_economic$PROPDMG <- as.numeric(paste(prop_seq, sep = " "))
stormdata_economic$CROPDMG <- as.numeric(paste(crop_seq, sep = " "))
stormdata_economic <- stormdata_economic[,c("EVTYPE", "PROPDMG", "CROPDMG")]
stormdata_economic_sum <- aggregate(stormdata_economic[,2:3], stormdata_economic[1], sum, na.rm = TRUE)
View(stormdata_economic_sum)
View(stormdata_economic_sum)
i <- ggplot(data = fat_and_inj_sum,
aes(y = INJURIES, x = BGN_DATE, colour = EVTYPE)) +
ggtitle("Injuries by time in every event") +
geom_line() +
geom_point()
f <- ggplot(data = fat_and_inj_sum,
aes(y = FATALITIES, x = BGN_DATE, colour = EVTYPE)) +
ggtitle("Fatalities by time in every event") +
geom_line() +
geom_point()
g <- multiplot(i, f, cols = 2)
g
p <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = PROPDMG, fill = PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Property damage in $") + xlab("Event group")
c <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = CROPDMG, fill = CROPDMG)) +
ggtitle("Crop damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Crop damage in $") + xlab("Event group")
g2 <- multiplot(p, c, cols = 2)
g2
stormdata_economic_sum
stormdata <- read.csv(bzfile("stormData.csv.bz2"), strip.white = TRUE)
##take only USA states
stormdata <- stormdata[stormdata$STATE %in% state.abb,]
##take data to analyze consequences to population health
stormdata_population_health <- stormdata[,c("BGN_DATE", "EVTYPE", "FATALITIES", "INJURIES")]
##extracting year of event
stormdata_population_health$BGN_DATE <- as.character(stormdata_population_health$BGN_DATE)
testregexp <- regexpr("[0-9]{4}", stormdata_population_health$BGN_DATE)
testmatch <- regmatches(stormdata_population_health$BGN_DATE, testregexp)
stormdata_population_health$BGN_DATE <- as.integer(stormdata_population_health$BGN_DATE <- testmatch)
##group by year and event
stormdata_population_health$EVTYPE <- tolower(stormdata_population_health$EVTYPE)
#fat_by_event <- subset(stormdata_population_health, FATALITIES > 0, select = c(BGN_DATE, EVTYPE, FATALITIES))
#fat_sum <- fat_by_event %>% group_by(BGN_DATE, EVTYPE) %>% summarize(FATALITIES = sum(FATALITIES))
#inj_by_event <- subset(stormdata_population_health, INJURIES > 0, select = c(BGN_DATE, EVTYPE, INJURIES))
#inj_sum <- inj_by_event %>% group_by(BGN_DATE, EVTYPE) %>% summarize(INJURIES = sum(INJURIES))
fat_and_inj <- subset(stormdata_population_health, (FATALITIES > 0 | INJURIES > 0), select = c(BGN_DATE, EVTYPE, FATALITIES, INJURIES))
#fat_and_inj_sum <- aggregate(fat_and_inj[,3:4], fat_and_inj[,1:2], sum)
##search words to group them into events
type <- vector(mode = "list", length = 6)
names(type) <- c("storm", "extreme_cold", "heat", "in_sea", "landslide", "other")
type[[1]] <- c("storm", "lightning", "thunder", "dust", "wind", "hurricane", "tornado", "funnel cloud", "flood", "rain", "fog", "mudslide", "fld", "stream")
type[[2]] <- c("frost", "chill", "precip","freez", "glaze", "sleet", "hypothermia", "low temp", "ice", "icy", "snow", "cold", "blizzard", "swirl", "hail", "winter", "wintry")
type[[3]] <- c("heat wave", "dry", "warm", "high temp", "drought", "heat", "hyperthermia", "fire")
type[[4]] <- c("drowning", "surf", "rip current", "sea", "ocean", "tsunami", "marine mishap", "marine", "wave", "waterspout", "water")
type[[5]] <- c("landslide", "avalance", "aval")
type[[6]] <- c("other", "high")
for (t in names(type)) {
#temp <- unique(fat_and_inj_sum$EVTYPE[grep(word, fat_and_inj_sum$EVTYPE)])
for (word in type[[t]]) {
fat_and_inj$EVTYPE <- gsub(paste(".*",word,".*", sep = ""), t, fat_and_inj$EVTYPE)
}
}
fat_and_inj_sum <- aggregate(fat_and_inj[,3:4], fat_and_inj[,1:2], sum)
##create graphics
i <- ggplot(data = fat_and_inj_sum,
aes(y = INJURIES, x = BGN_DATE, colour = EVTYPE)) +
ggtitle("Injuries by time in every event") +
geom_line() +
geom_point()
f <- ggplot(data = fat_and_inj_sum,
aes(y = FATALITIES, x = BGN_DATE, colour = EVTYPE)) +
ggtitle("Fatalities by time in every event") +
geom_line() +
geom_point()
g <- multiplot(i, f, cols = 2)
g
##take data to analyze consequences to economic
stormdata_economic <- subset(stormdata, (CROPDMG > 0 | PROPDMG > 0), select = c(EVTYPE, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP))
##transform economic damage fields
stormdata_economic$EVTYPE <- tolower(stormdata_economic$EVTYPE)
stormdata_economic$PROPDMGEXP <- tolower(stormdata_economic$PROPDMGEXP)
stormdata_economic$CROPDMGEXP <- tolower(stormdata_economic$CROPDMGEXP)
#it doesn't work
#f <- function(value_a, value_b)
#    {
#    if (value_b > 0) {
#        if (value_a == "k")
#            value_b <- as.numeric(value_b) * 1000
#        if (value_a == "m")
#            value_b <- as.numeric(value_b) * 10^6
#        if (value_a == "b")
#            value_b <- as.numeric(value_b) * 10^9
#        if (value_a == "h")
#            value_b <- as.numeric(value_b) * 100
#            }
#}
#prop_seq <- mapply(stormdata_economic$PROPDMG, stormdata_economic$PROPDMGEXP, FUN = f)
#crop_seq <- mapply(stormdata_economic$CROPDMG, stormdata_economic$CROPDMGEXP, FUN = f)
#it works
prop_seq <- apply(stormdata_economic, 1, function(x) { if (x["PROPDMGEXP"] == "k") { as.numeric(x["PROPDMG"]) * 1000 } else {if (x["PROPDMGEXP"] == "m") {as.numeric(x["PROPDMG"])*10^6} else {if (x["PROPDMGEXP"] == "b") {as.numeric(x["PROPDMG"])*10^9} else {if (x["PROPDMGEXP"] == "h") {as.numeric(x["PROPDMG"])*100}}}}} )
crop_seq <- apply(stormdata_economic, 1, function(x) { if (x["CROPDMGEXP"] == "k") { as.numeric(x["CROPDMG"]) * 1000 } else {if (x["CROPDMGEXP"] == "m") {as.numeric(x["CROPDMG"])*10^6} else {if (x["CROPDMGEXP"] == "b") {as.numeric(x["CROPDMG"])*10^9} else {if (x["CROPDMGEXP"] == "h") {as.numeric(x["CROPDMG"])*100}}}}} )
stormdata_economic$PROPDMG <- as.numeric(paste(prop_seq, sep = " "))
stormdata_economic$CROPDMG <- as.numeric(paste(crop_seq, sep = " "))
stormdata_economic <- stormdata_economic[,c("EVTYPE", "PROPDMG", "CROPDMG")]
##search words to group them into events
type <- vector(mode = "list", length = 6)
names(type) <- c("storm", "extreme_cold", "heat", "in_sea", "landslide", "other")
type[[1]] <- c("storm", "dam break", "gustnado", "tropical depression", "landspout", "tstmw", "burst", "wet", "turbulence", "lig", "thunder", "dust", "wind", "hurricane", "tornado", "funnel cloud", "flood", "rain", "fog", "torndao", "fld", "stream")
type[[2]] <- c("frost", "cool", "chill", "precip","freez", "mix", "glaze", "sleet", "hypothermia", "low temp", "ice", "icy", "snow", "cold", "blizzard", "swirl", "hail", "winter", "wintry")
type[[3]] <- c("heat wave", "smoke", "dry", "warm", "high temp", "drought", "heat", "hyperthermia", "fire")
type[[4]] <- c("drowning", "beach", "surf", "surge", "coast", "rip current", "tide", "seiche", "sea", "ocean", "tsunami", "marine mishap", "marine", "wave", "waterspout", "water")
type[[5]] <- c("landslide", "avalance", "aval", "rockslide", "slide", "land")
type[[6]] <- c("other", "high", "\\?", "urban", "county")
for (t in names(type)) {
#temp <- unique(stormdata_economic$EVTYPE[grep(word, stormdata_economic$EVTYPE)])
for (word in type[[t]]) {
stormdata_economic$EVTYPE <- gsub(paste(".*",word,".*", sep = ""), t, stormdata_economic$EVTYPE)
}
}
stormdata_economic_sum <- aggregate(stormdata_economic[,2:3], stormdata_economic[1], sum, na.rm = TRUE)
##create graphics
p <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = PROPDMG, fill = PROPDMG)) +
ggtitle("Property damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Property damage in $") + xlab("Event group")
c <- ggplot(data = stormdata_economic_sum,
aes(x = EVTYPE, y = CROPDMG, fill = CROPDMG)) +
ggtitle("Crop damage by event") +
geom_bar(position = "dodge", alpha = 0.5, stat = "identity") +
ylab("Crop damage in $") + xlab("Event group")
g2 <- multiplot(p, c, cols = 2)
g2
stormdata_population_health$EVTYPE <- tolower(stormdata_population_health$EVTYPE)
stormdata_economic$EVTYPE <- tolower(stormdata_economic$EVTYPE)
stormdata_economic$PROPDMGEXP <- tolower(stormdata_economic$PROPDMGEXP)
stormdata_economic$CROPDMGEXP <- tolower(stormdata_economic$CROPDMGEXP)
fat_and_inj <- subset(stormdata_population_health, (FATALITIES > 0 | INJURIES > 0
stormdata_population_health$EVTYPE <- tolower(stormdata_population_health$EVTYPE)
stormdata_economic$EVTYPE <- tolower(stormdata_economic$EVTYPE)
stormdata_economic$PROPDMGEXP <- tolower(stormdata_economic$PROPDMGEXP)
stormdata_economic$CROPDMGEXP <- tolower(stormdata_economic$CROPDMGEXP)
fat_and_inj <- subset(stormdata_population_health, (FATALITIES > 0 | INJURIES > 0), select = c(BGN_DATE, EVTYPE, FATALITIES, INJURIES))
stormdata_population_health$EVTYPE <- tolower(stormdata_population_health$EVTYPE)
stormdata_economic$EVTYPE <- tolower(stormdata_economic$EVTYPE)
stormdata_economic$PROPDMGEXP <- tolower(stormdata_economic$PROPDMGEXP)
stormdata_economic$CROPDMGEXP <- tolower(stormdata_economic$CROPDMGEXP)
fat_and_inj <- subset(stormdata_population_health, (FATALITIES > 0 | INJURIES > 0), select = c(BGN_DATE, EVTYPE, FATALITIES, INJURIES))
file.edit(“.Rprofile”)
file.edit(".Rprofile")
getwd()
oldwd <- getwd()
setwd("C:\Documents and Settings\Администратор\Statistical Inference\Programming Assignment 1")
setwd("C:/Documents and Settings/Администратор/Statistical Inference/Programming Assignment 1")
getwd()
simulations_number <- 1000
n <- 40
lambda <- 0.2
mn = NULL
variance = NULL
for (i in 1 : simulations_number) {
expd <- rexp(n, lambda)   #Exponential Distribution
mn  <- c(mn, mean(expd)) #mean
variance <- c(variance, var(expd)) #Variance
}
sample_mean <- mean(mn) # Sample Mean
mean_theoretical <- 1/lambda # Theoritical Mean
sample_mean
mean_theoretical
plot1 <- qplot(mn,  fill = I("blue"), color = I("white"), geom = "histogram",
xlab = "Mean", binwidth = 0.5, xlim = c(1,9),
main = "Distribution of 1000 Simulation of averages of 40 exponentials")
plot1 <- plot1 + geom_vline(xintercept = sample_mean, color = "black")
plot1 <- plot1 + geom_text(mapping = aes(x = sample_mean, y = 110,
label = paste("Sample Mean=",
round(sample_mean,3))),
size = 4, vjust = 1, hjust = -0.1)
plot1
plot1 <- qplot(mn,  fill = I("blue"), color = I("white"), geom = "histogram",
xlab = "Mean", binwidth = 0.5, xlim = c(1,9), alpha = 0.2,
main = "Distribution of 1000 Simulation of averages of 40 exponentials")
plot1 <- plot1 + geom_vline(xintercept = sample_mean, color = "black")
plot1 <- plot1 + geom_text(mapping = aes(x = sample_mean, y = 110,
label = paste("Sample Mean=",
round(sample_mean,3))),
size = 4, vjust = 1, hjust = -0.1)
plot1
sample_variance <- mean(variance) # Sample Variance
variance_theoretical <- (1/lambda)^2 # Theoritical Variance
sample_variance
variance_theoretical
plot2 <- qplot(variance,  fill = I("blue"), color = I("white"), alpha = 0.2,
geom = "histogram", binwidth = 2,
xlab = "Variance of 40 Exponentials",
main = "Distribution of 1000 Simulation of averages of 40 exponentials")
plot2 <- plot2 + geom_vline(xintercept = sample_variance, color = "black")
plot2 <- plot2 + geom_text(mapping = aes(x = sample_variance, y = 130,
label = paste("Sample Variance=",
round(sample_variance, 3))),
size=4, hjust= -0.1)
sample_variance <- mean(variance) # Sample Variance
variance_theoretical <- (1/lambda)^2 # Theoritical Variance
sample_variance
variance_theoretical
###create graphics
plot2 <- qplot(variance,  fill = I("blue"), color = I("white"), alpha = 0.2,
geom = "histogram", binwidth = 2,
xlab = "Variance of 40 Exponentials",
main = "Distribution of 1000 Simulation of averages of 40 exponentials")
plot2 <- plot2 + geom_vline(xintercept = sample_variance, color = "black")
plot2 <- plot2 + geom_text(mapping = aes(x = sample_variance, y = 130,
label = paste("Sample Variance=",
round(sample_variance, 3))),
size=4, hjust= -0.1)
plot2 <- qplot(variance,  fill = I("blue"), color = I("white"),
geom = "histogram", binwidth = 2,
xlab = "Variance of 40 Exponentials",
alpha = 0.2,
main = "Distribution of 1000 Simulation of averages of 40 exponentials")
plot2 <- plot2 + geom_vline(xintercept = sample_variance, color = "black")
plot2 <- plot2 + geom_text(mapping = aes(x = sample_variance, y = 130,
label = paste("Sample Variance=",
round(sample_variance, 3))),
size=4, hjust= -0.1)
plot2
expdistrib <- rexp(simulations_number, lambda)
expdistrib_mean = mean(expdistrib) #Mean Exponential Distribution
expdistrib_variance = var(expdistrib) #Variance Exponential Distribution
expdistrib_mean
expdistrib_variance
plot2 <- qplot(variance,  fill = I("green"), color = I("white"),
geom = "histogram", binwidth = 2,
xlab = "Variance of 40 Exponentials",
alpha = 0.2,
main = "Distribution of 1000 Simulation of averages of 40 exponentials")
plot2 <- plot2 + geom_vline(xintercept = sample_variance, color = "black")
plot2 <- plot2 + geom_text(mapping = aes(x = sample_variance, y = 130,
label = paste("Sample Variance=",
round(sample_variance, 3))),
size=4, hjust= -0.1)
plot2
plot3 <- qplot(expdistrib,  fill = I("yellow"), color = I("white"),
alpha = 0.2,
geom = "histogram", xlab = "Value", binwidth = 1.5,
main = "Distribution of 1000 exponentials ")
plot3 <- plot3 + geom_vline(xintercept = expdist_mean, color = "black")
plot3 <- plot3 + geom_text(mapping = aes(x = expdist_mean, y = 180,
label = paste("Sample Mean = ",
round(expdist_mean, 3))),
size = 4, hjust = -0.1, vjust = 1)
plot3
plot3 <- qplot(expdistrib,  fill = I("yellow"), color = I("white"),
alpha = 0.2,
geom = "histogram", xlab = "Value", binwidth = 1.5,
main = "Distribution of 1000 exponentials ")
plot3 <- plot3 + geom_vline(xintercept = expdistrib_mean, color = "black")
plot3 <- plot3 + geom_text(mapping = aes(x = expdistrib_mean, y = 180,
label = paste("Sample Mean = ",
round(expdistrib_mean, 3))),
size = 4, hjust = -0.1, vjust = 1)
plot3
install.packages("pdflatex")
pdflatex -v
?pandoc
install.packages("pandoc")
file.edit(".Rprofile")
file.edit(".Rprofile")
getwd()
install.package("teX")
install.packages("teX")
install.packages("mikteX")
library(dplyr)
library(ggplot2)
library(knitr)
###############################################################################################
## 1. Load the ToothGrowth data and perform some basic exploratory data analyses
## Load dataset ToothGrowth
library(datasets)
data(ToothGrowth)
## Some basic exploratory data analyses
str(ToothGrowth)
head(ToothGrowth)
tail(ToothGrowth)
## Number of Rows and Columns.
dim(ToothGrowth)
## Sample Size n
sample_size <- length(ToothGrowth$len)
sample_size
## Mean group by dose and by OJ & VC
mean_groups <- aggregate(ToothGrowth$len,list(ToothGrowth$supp,ToothGrowth$dose),mean) ## X bar - Mean
mean_groups
## Standard Deviation group by dose and by OJ & VC
SD_group <- aggregate(ToothGrowth$len,list(ToothGrowth$supp,ToothGrowth$dose),sd) ## s - standard Deviation
SD_group
## Boxplot graph of the tooth length vs the does
ggplot(ToothGrowth, aes(x = factor(dose), y = len, fill = factor(dose)))+
geom_boxplot()+
facet_grid(.~supp)+
labs(title = "Tooth Length vs. Dose  by for OJ & VC",
x = "Doses", y = "Tooth Length")
##########################################################################################################
## 2. Provide a basic summary of the data.
summary(ToothGrowth)
## Table view of data.
table(ToothGrowth$supp,ToothGrowth$dose)
table(ToothGrowth)
###########################################################################################################
## 3. Use confidence intervals and/or hypothesis tests to compare tooth growth by supp and dose.
## (Only use the techniques from class, even if there's other approaches worth considering)
## From the box plot, OJ looks to be doing better with dose 0.5 and 1 effect on teeth growth than VC. To test this hypothesis
## by hold a the mean of OJ and VC does not cross zero.
## dose 0.5
## We are 95% confident that the limits of 1.719057 and 8.780943 actually do contain the difference between the two population means.
## Because those limts do not contain zero, this confodence interval suggests that it is very possible that the two population
## means are not equal.
ojdose0.5 <- ToothGrowth %>% filter(supp=="OJ" & dose=="0.5")
vcdose0.5 <- ToothGrowth %>% filter(supp=="VC" & dose=="0.5")
t.test(ojdose0.5$len,vcdose0.5$len)
## dose 1
## We are 95% confident that the limits of 2.802148 and 9.057852 actually do contain the difference between the two population means.
## Because those limts do not contain zero, this confodence interval suggests that it is very possible that the two population
## means are not equal.
ojdose1 <- ToothGrowth %>% filter(supp=="OJ" & dose=="1")
vcdose1 <- ToothGrowth %>% filter(supp=="VC" & dose=="1")
t.test(ojdose1$len,vcdose1$len)
## dose 2
## We are 95% confident that the limits of -3.79807 and 3.63807 actually do contain the difference between the two population means.
## However, because those limts do contain zero, this confodence interval suggests that it is very possible that the two population
## means are equal.
ojdose2 <- ToothGrowth %>% filter(supp=="OJ" & dose=="2")
vcdose2 <- ToothGrowth %>% filter(supp=="VC" & dose=="2")
t.test(ojdose2$len,vcdose2$len)
